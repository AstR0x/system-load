{"version":3,"sources":["address.js","components/Table.js","components/Charts.js","App.js","index.js"],"names":["URL","Table","props","_this","Object","classCallCheck","this","data","possibleConstructorReturn","getPrototypeOf","call","getData","state","CPU","totalM","freeM","oneMin","fiveMin","fifteenMin","changeData","_this2","setInterval","setState","xhr","XMLHttpRequest","open","send","status","JSON","parse","responseText","console","log","react_default","a","createElement","className","toFixed","React","Component","Charts","cpuData","memoryData","timeData","Date","toLocaleTimeString","oneMinuteData","fiveMinutesData","fifteenMinutesData","changeCharts","cpuCtx","document","getElementById","getContext","memoryCtx","loadAverageCtx","cpuChart","Chart","type","labels","datasets","label","backgroundColor","borderColor","options","legend","fontColor","fontSize","scales","xAxes","gridLines","color","lineWidth","ticks","yAxes","min","max","stepSize","scaleLabel","display","labelString","memoryChart","loadAverageChart","length","shift","push","update","id","App","components_Table","components_Charts","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.8c610268.chunk.js","sourcesContent":["const URL = \"http://77.246.159.121/server/data.php\";\r\nexport default URL","import React from 'react';\r\nimport URL from '../address'\r\n\r\nclass Table extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    const data = this.getData();\r\n\r\n    this.state = {\r\n      CPU: data['CPU'],\r\n      totalM: data['TotalMemory'],\r\n      freeM: data['FreeMemory'],\r\n      oneMin: data['oneMinute'],\r\n      fiveMin: data['fiveMinutes'],\r\n      fifteenMin: data['fifteenMinutes'],\r\n    };\r\n    this.changeData();\r\n  }\r\n\r\n  changeData() {\r\n    setInterval(() => {\r\n      this.data = this.getData();\r\n      this.setState({\r\n        CPU: this.data['CPU'],\r\n        totalM: this.data['TotalMemory'],\r\n        freeM: this.data['FreeMemory'],\r\n        oneMin: this.data['oneMinute'],\r\n        fiveMin: this.data['fiveMinutes'],\r\n        fifteenMin: this.data['fifteenMinutes']\r\n      })\r\n    }, 2000)\r\n  }\r\n\r\n  getData() {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', URL, false);\r\n    xhr.send();\r\n    if (xhr.status != 200) {\r\n      console.log(xhr.status);\r\n    } else {\r\n      return (JSON.parse(xhr.responseText));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <table className=\"system-load-table\">\r\n          <tbody>\r\n          <tr className=\"first_row\">\r\n            <th>CPU</th>\r\n            <th>Total memory</th>\r\n            <th>Free memory</th>\r\n            <th>1 minute</th>\r\n            <th>5 minutes</th>\r\n            <th>15 minutes</th>\r\n          </tr>\r\n          <tr className=\"second-row\">\r\n            <th>{this.state.CPU}%</th>\r\n            <th>{(this.state.totalM).toFixed(2) + ' МБ'}</th>\r\n            <th>{(this.state.freeM).toFixed(2) + ' МБ'}</th>\r\n            <th>{this.state.oneMin}</th>\r\n            <th>{this.state.fiveMin}</th>\r\n            <th>{this.state.fifteenMin}</th>\r\n          </tr>\r\n          </tbody>\r\n        </table>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Table","import React from 'react'\r\nimport Chart from 'chart.js'\r\nimport URL from '../address'\r\n\r\nclass Charts extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const data = this.getData();\r\n\r\n    this.state = {\r\n      cpuData: [data['CPU']],\r\n      memoryData: [data['FreeMemory']],\r\n      timeData: [new Date().toLocaleTimeString()],\r\n      oneMinuteData: [data['oneMinute']],\r\n      fiveMinutesData: [data['fiveMinutes']],\r\n      fifteenMinutesData: [data['fifteenMinutes']],\r\n      data: data\r\n    };\r\n\r\n    this.changeCharts();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const cpuCtx = document.getElementById('cpuChart').getContext('2d');\r\n    const memoryCtx = document.getElementById('memoryChart').getContext('2d');\r\n    const loadAverageCtx = document.getElementById('loadAverageChart').getContext('2d');\r\n\r\n    this.cpuChart = new Chart(cpuCtx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: this.state.timeData,\r\n        datasets: [{\r\n          label: \"CPU\",\r\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n          borderColor: 'rgb(255, 99, 132)',\r\n          data: this.state.cpuData,\r\n        }]\r\n      },\r\n\r\n      options: {\r\n        legend: {\r\n          labels: {\r\n            fontColor: \"white\",\r\n            fontSize: 18\r\n          }\r\n        },\r\n        scales: {\r\n          xAxes: [{\r\n            gridLines: {\r\n              color: 'rgba(171,171,171,1)',\r\n              lineWidth: 0.5\r\n            },\r\n            ticks: {\r\n              fontColor: \"white\",\r\n              fontSize: 12,\r\n            }\r\n          }],\r\n          yAxes: [{\r\n            gridLines: {\r\n              color: 'rgba(171,171,171,1)',\r\n              lineWidth: 0.5\r\n            },\r\n            ticks: {\r\n              fontColor: \"white\",\r\n              fontSize: 12,\r\n              min: 0,\r\n              max: 100,\r\n              stepSize: 20\r\n            },\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: \"PERCENTAGES\",\r\n              fontColor: \"#c0c0c0\"\r\n            }\r\n          }]\r\n        }\r\n      }\r\n    });\r\n\r\n    this.memoryChart = new Chart(memoryCtx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: this.state.timeData,\r\n        datasets: [{\r\n          label: \"Free memory\",\r\n          backgroundColor: 'rgba(16, 115, 181, 0.2)',\r\n          borderColor: 'rgb(16, 115, 181)',\r\n          data: this.state.memoryData,\r\n        }]\r\n      },\r\n\r\n      options: {\r\n        legend: {\r\n          labels: {\r\n            fontColor: \"white\",\r\n            fontSize: 18\r\n          }\r\n        },\r\n        scales: {\r\n          xAxes: [{\r\n            ticks: {\r\n              fontColor: \"white\",\r\n              fontSize: 12,\r\n            },\r\n            gridLines: {\r\n              color: 'rgba(171,171,171,1)',\r\n              lineWidth: 0.5\r\n            },\r\n          }],\r\n          yAxes: [{\r\n            gridLines: {\r\n              color: 'rgba(171,171,171,1)',\r\n              lineWidth: 0.5\r\n            },\r\n            ticks: {\r\n              fontColor: \"white\",\r\n              fontSize: 12,\r\n              min: 0,\r\n              max: this.state.data['TotalMemory'],\r\n              stepSize: this.state.data['TotalMemory'] / 4,\r\n            },\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: \"MEGABYTES\",\r\n              fontColor: \"#c0c0c0\"\r\n            }\r\n          }]\r\n        }\r\n      }\r\n    });\r\n\r\n    this.loadAverageChart = new Chart(loadAverageCtx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: this.state.timeData,\r\n        datasets: [{\r\n          label: \"1 minute\",\r\n          backgroundColor: 'rgba(255, 99, 132, 0.05)',\r\n          borderColor: 'rgb(255, 99, 132)',\r\n          data: this.state.oneMinuteData,\r\n        },\r\n          {\r\n            label: \"5 minutes\",\r\n            backgroundColor: 'rgba(65, 99, 222, 0.05)',\r\n            borderColor: 'rgb(65, 99, 222)',\r\n            data: this.state.fiveMinutesData,\r\n          },\r\n          {\r\n            label: \"15 minutes\",\r\n            backgroundColor: 'rgba(145, 44, 132, 0.05)',\r\n            borderColor: 'rgb(145, 44, 132)',\r\n            data: this.state.fifteenMinutesData,\r\n          },]\r\n      },\r\n\r\n      options: {\r\n        legend: {\r\n          labels: {\r\n            fontColor: \"white\",\r\n            fontSize: 18\r\n          }\r\n        },\r\n        scales: {\r\n          xAxes: [{\r\n            ticks: {\r\n              fontColor: \"white\",\r\n              fontSize: 12,\r\n            },\r\n            gridLines: {\r\n              color: 'rgba(171,171,171,1)',\r\n              lineWidth: 0.5\r\n            },\r\n          }],\r\n          yAxes: [{\r\n            gridLines: {\r\n              color: 'rgba(171,171,171,1)',\r\n              lineWidth: 0.5\r\n            },\r\n            ticks: {\r\n              fontColor: \"white\",\r\n              fontSize: 12,\r\n              min: 0,\r\n              stepSize: 0.50\r\n            }\r\n          }]\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  getData() {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', URL, false);\r\n    xhr.send();\r\n    if (xhr.status != 200) {\r\n      console.log(xhr.status);\r\n    } else {\r\n      return (JSON.parse(xhr.responseText));\r\n    }\r\n  }\r\n\r\n  changeCharts() {\r\n    setInterval(() => {\r\n      this.data = this.getData();\r\n      if (this.state.timeData.length >= 10) {\r\n        this.state.timeData.shift();\r\n        this.state.cpuData.shift();\r\n        this.state.memoryData.shift();\r\n        this.state.oneMinuteData.shift();\r\n        this.state.fiveMinutesData.shift();\r\n        this.state.fifteenMinutesData.shift();\r\n      }\r\n\r\n      this.state.cpuData.push(this.data['CPU'] / 1);\r\n      this.state.memoryData.push((this.data['FreeMemory']).toFixed(2));\r\n      this.state.timeData.push(new Date().toLocaleTimeString());\r\n      this.state.oneMinuteData.push(this.data['oneMinute']);\r\n      this.state.fiveMinutesData.push(this.data['fiveMinutes']);\r\n      this.state.fifteenMinutesData.push(this.data['fifteenMinutes']);\r\n      this.loadAverageChart.update();\r\n      this.cpuChart.update();\r\n      this.memoryChart.update();\r\n    }, 3000)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"canvas-block\">\r\n          <div className=\"cpu-and-memory-charts\">\r\n            <div className='canvasCpu-block'>\r\n              <canvas id=\"cpuChart\"></canvas>\r\n            </div>\r\n            <div className='canvasMemory-block'>\r\n              <canvas id=\"memoryChart\"></canvas>\r\n            </div>\r\n          </div>\r\n          <div className=\"loadAver\">\r\n            <canvas id=\"loadAverageChart\"></canvas>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Charts","import React, {Component} from 'react';\nimport Table from './components/Table';\nimport Charts from './components/Charts'\nimport './App.css';\n\nfunction getData() {\n  let xhr = new XMLHttpRequest();\n  xhr.open('GET', 'http://77.246.159.121/core/data.php', false);\n  xhr.send();\n  if (xhr.status != 200) {\n    console.log(xhr.status);\n  } else {\n    return (JSON.parse(xhr.responseText));\n  }\n}\n\nfunction App() {\n    return [\n          <Table/> ,\n          <Charts/>\n    ]\n  }\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n\n\n\n"],"sourceRoot":""}